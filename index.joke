#! /arpa/af/d/dbohdan/bin/joker
;; A toy old-school CGI guestbook written in Joker.
;; Version 0.1.0.
;; https://github.com/dbohdan/joker-cgi-guestbook
;;
;; Copyright (c) 2024 D. Bohdan
;;
;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to deal
;; in the Software without restriction, including without limitation the rights
;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
;; THE SOFTWARE.

;; User-editable settings begin here.

;; Set to `false` in production.
(def debug true)

;; If `false`, disables posting and replaces the form
;; with a message it is disabled.
(def allow-posting true)

;; How long a captcha stays valid, in seconds.
(def captcha-expiry (* 10 60))

;; Where to store all of the guestbook's information.
;; This file will contain the HMAC secret key for captchas,
;; so don't make it publicly readable.
(def db-file "guestbook.bolt")

;; The longest a submitter's contact information, name, and message can be,
;; in Unicode characters.
(def max-length {"contact" 256
                 "name" 64
                 "message" 3072})

;; The minimum wait time in seconds for posting from the same remote address.
(def min-wait (* 60 60))

;; The page's stylesheet.
(def css "
*, *::before, *::after {
  box-sizing: border-box;
}

html {
  display: flex;
  justify-content: center;
}

body {
  background-color: #eed3d3;
  font-family: serif;
  font-size: 16px;
  margin-top: 0;
  margin-bottom: 1rem;
  max-width: 35rem;
}

article, form {
  background-color: white;
  border: solid 0.15rem;
  border-radius: 12px;
  margin: 1rem 0;
  padding: 0 1rem;
}

input[type='submit'] {
  padding: 0 2.5rem;
}

div.submit {
  display: flex;
  justify-content: right;
  margin-top: 1.15rem;
}

dl {
  margin-top: 1rem;
}

dl, form div {
  margin-bottom: 1rem;
}

dd.message {
  white-space: pre-line;
}

dt, input[type='submit'], label {
  font-weight: bold;
}

form {
  display: flex;
  flex-direction: column;
}

form div div {
  margin: 0.5rem 0;
}

form h2 {
  margin-bottom: 0.65rem;
}

form input[type='text'], form textarea {
  margin-top: 0.15rem;
  width: 100%;
}

form textarea {
  min-height: 7rem;
}

input, textarea {
  border: solid 1px;
  font: inherit;
}
")

;; All of the guestbook's messages.
;; You can change them to customize and localize the guestbook.
(def msgcat-messages
  {:name
   "Name:"
   :captcha
   "Captcha:"
   :captcha-info
   "Please solve the challenge <code>%s</code> to sign the guestbook."
   :captcha-missing
   "Sorry, but to sign the guestbook you must solve the captcha challenge."
   :captcha-wrong
   "Sorry, either the solution is wrong, or your captcha is expired or invalid."
   :contact
   "Contact:"
   :contact-in-form
   "Contact information (will be public):"
   :entry-id
   "entry-%s"
   :message
   "Message:"
   :posting-disabled
   "Posting is currently disabled."
   :rate-limited
   "Sorry, but your network address has signed the guestbook recently."
   :required-field-missing
   "Sorry, a name and a message are required."
   :sign
   "Sign the guestbook"
   :submit-button
   "Sign"
   :title
   "Guestbook"
   :too-long
   "Sorry, but the following fields are too long: %s."
   :unknown-error
   "Sorry, an unknown error has occurred."})

;; End of user-editable settings.

(def buckets
  {:config "config"
   :entries "entries"
   :rate-limits "rate-limits"})

(def statuses
  {:200 "200 OK"
   :422 "422 Unprocessable Entity"
   :429 "429 Too Many Requests"
   :500 "500 Internal Server Error"
   :503 "503 Service Unavailable"})

(def hide-key "hide")
(def secret-keys {:captcha "captcha-secret"
                  :id "id-secret"})

(defn msgcat
  "Returns the message `k` from the message catalog formatted with `args`."
  [key & args]
  (apply format (msgcat-messages key) args))

(defn parse-query
  "Parses the query part of a URI or a URL-encoded form.
  Returns a map."
  [query]
  (as-> query x
    (joker.string/trim x)
    (joker.string/split x "&")
    (mapcat
     (fn [pair]
       (rest
        (re-matches #"^([^=]*)=(.*)$" pair)))
     x)
    (map joker.url/query-unescape x)
    (apply hash-map x)))

(defn unix-now
  "Returns the unix timestamp in seconds."
  []
  (->
   (joker.time/now)
   (joker.time/unix)))

(defn address-rate-limited?
  "Returns `true` if the remote address is rate-limited
  and should not be allowed to post as of the timestamp."
  [db remote current-timestamp]
  (let [last-timestamp
        (->
         (joker.bolt/get db (:rate-limits buckets) remote)
         (or "0")
         (joker.strconv/parse-int 10 0))]
    (> min-wait (- current-timestamp last-timestamp))))

(defn set-secret-if-nil
  "Generates and sets a random HMAC secret key
  if there is no secret key in the database or it is `nil`."
  [db key]
  (when (nil? (joker.bolt/get db (:config buckets) key))
    (joker.bolt/put db (:config buckets) key (joker.uuid/new))))

(defn hex-hmac
  "Return HMAC-SHA-512 in hex as a string."
  [message key]
  (->
   (joker.crypto/hmac :sha512 message key)
   (joker.hex/encode-string)))

(defn sign
  "Returns `message` signed using HMAC
  with a secret key stored in the database."
  [db message]
  (let [secret (joker.bolt/get db (:config buckets) (:captcha secret-keys))]
    (hex-hmac message secret)))

(defn new-challenge
  "Returns a random captcha challenge that looks like `'(+ 1 -2 3)`."
  []
  (->>
   (map
    (fn [_] (- 5 (rand-int 10)))
    (range (+ 2 (rand-int 4))))
   (list* '+)
   (str)))

(defn challenge-solution?
  "Returns whether the proposed solution
  solves a Lisp addition captcha challenge.
  Note that `solution` is a string"
  [challenge solution]
  (and (< (count solution) 10)
       (re-matches #"\(\+( -?\d+)+\)" challenge)
       (= (->>
           challenge
           (re-seq #"-?\d+")
           (map (fn [x] (joker.strconv/parse-int x 10 0)))
           (apply +)
           (str))
          (joker.string/trim solution))))

(defn new-captcha
  "Returns a signed stateless captcha."
  [db current-timestamp]
  (let [challenge (new-challenge)
        challenge-blob (joker.json/write-string
                        [current-timestamp challenge])]
    {:challenge challenge
     :challenge-blob challenge-blob
     :signature (sign db challenge-blob)}))

(defn captcha-solution?
  "Returns `true` if `captcha` solves the signed stateless captcha
  represented by `challenge-blob` and `signature`.
  Returns `false` if the signature is invalid."
  [db current-timestamp captcha challenge-blob signature]
  (let [[captcha-timestamp challenge] (joker.json/read-string challenge-blob)]
    (and (> captcha-expiry (- current-timestamp captcha-timestamp))
         (= (sign db challenge-blob) signature)
         (challenge-solution? challenge captcha))))

(defn check-counts
  "Returns a sequence of keys that have greater `count` in `m`
  than the limits in `reference`."
  [m reference]
  (mapcat
   (fn [[key limit]]
     (if (> (count (get m key "")) limit)
       [key]
       []))
   (seq reference)))

(defn add-entry
  "Adds an entry to the guestbook and to the rate-limiting table."
  [db current-timestamp remote {:strs [contact message name]}]
  (joker.bolt/put db
                  (:entries buckets)
                  (str (joker.bolt/next-sequence db (:entries buckets)))
                  (joker.json/write-string
                   {:contact contact
                    :message message
                    :name name
                    :remote remote}))
  (joker.bolt/put db
                  (:rate-limits buckets)
                  remote
                  (str current-timestamp)))

(defn compress-newlines
  "Removes more than two newlines in a row."
  [s]
  (joker.string/replace s #"[\r\n]{2,}" "\n\n"))

(defn entry
  "Returns Hiccup markup for a guestbook entry."
  [{:strs [contact message name]}]
  [:dl
   [:dt (msgcat :name)] [:dd name]
   (when-not (joker.string/blank? contact)
     (list [:dt (msgcat :contact)] [:dd contact]))
   [:dt (msgcat :message)] [:dd {:class :message} (compress-newlines message)]])

(defn permute-id
  "Make a linear numeric id not linear.
  Returns a hex string."
  [id-secret id]
  (subs (hex-hmac (str id) id-secret) 0 6))

(defn entries
  "Returns Hiccup markup for a sequence of guestbook entries."
  [id-secret bucket-contents]
  [:div
   (for [[id entry-data] bucket-contents]
     [:article {:id (msgcat :entry-id (permute-id id-secret id))}
      (entry entry-data)])])

(defn entries-in-db
  "Returns Hiccup markup for all guestbook entries in a database."
  [db]
  (->>
   (joker.bolt/by-prefix db (:entries buckets) "")
   (map (fn [[id json]] [(joker.strconv/parse-int id 10 0)
                         (joker.json/read-string json)]))
   (filter (fn [[_ entry-data]] (let [hide (get entry-data hide-key false)]
                                  (or (not hide) (= hide 0)))))
   (sort)
   (entries (joker.bolt/get db (:config buckets) (:id secret-keys)))))

(defn form
  "Returns Hiccup markup for the guestbook submission form."
  [action {:keys [challenge challenge-blob signature]}]
  [:form {:method :post
          :action action}
   [:h2 (msgcat :sign)]
   [:div
    [:input {:type :hidden :name :challenge :value challenge-blob}]
    [:input {:type :hidden :name :signature :value signature}]
    [:div
     [:label {:for :name} (msgcat :name)]
     [:input {:type :text
              :id :name
              :name :name
              :maxlength (max-length "name")
              :required true}]]
    [:div
     [:label {:for :contact} (msgcat :contact-in-form)]
     [:input {:type :text
              :id :contact
              :name :contact
              :maxlength (max-length "contact")}]]
    [:div
     [:label {:for :message} (msgcat :message)]
     [:textarea {:id :message
                 :name :message
                 :maxlength (max-length "message")
                 :required true}]]

    [:div
     [:div
      (joker.hiccup/raw-string (msgcat :captcha-info challenge))]
     [:label {:for :captcha} (msgcat :captcha)]
     [:input {:type :text
              :id :captcha
              :name :captcha
              :autocomplete :off}]]
    [:div {:class :submit}
     [:input {:type :submit
              :value (msgcat :submit-button)}]]]])

(defn html-view
  "Takes the Hiccup markup in `body` and returns a full HTML page
  plus the headers for CGI as text."
  [status body & {:keys [title-prefix]}]
  (str
   "Content-Type: text/html\r\n"
   "Status: " status "\r\n\r\n"
   "<!doctype html>"
   (joker.hiccup/html
    {:mode :html}
    [:html {:lang "en"}
     [:head
      [:meta {:charset "utf-8"}]
      [:meta {:name "viewport"
              :content "width=device-width, initial-scale=1.0, user-scalable=yes"}]
      [:title
       (str
        (if (joker.string/blank? title-prefix)
          ""
          (str title-prefix " - "))
        (msgcat :title))]
      [:style (joker.hiccup/raw-string css)]]
     body])))

(defn error-view
  "Returns an HTML page with the given error message."
  [status message]
  (html-view
   status
   [:body [:h1 message]]
   :title-prefix status))

(defn normal-view
  "Returns an HTML page with the guestbook entries and optionally
  the submission form."
  [db script-name show-post-form captcha]
  (html-view
   (:200 statuses)
   [:body
    [:h1 (msgcat :title)]
    (entries-in-db db)
    (if show-post-form
      (form script-name captcha)
      [:h2 (msgcat :posting-disabled)])]))


(defn cgi
  "Processes a CGI request with a given database, environment-variable map,
  and standard input."
  [db env input]
  (try
    (dorun
     (for [key (vals secret-keys)]
       (set-secret-if-nil db key)))
    (let [current-timestamp (unix-now)
          page-captcha (new-captcha db current-timestamp)
          query-without-defaults (parse-query input)
          query (merge {"captcha" ""
                        "challenge" ""
                        "contact" ""
                        "message" ""
                        "name" ""
                        "secret" ""}
                       query-without-defaults)
          too-long (check-counts query max-length)
          remote (get env "REMOTE_HOST" (get env "REMOTE_ADDR" ""))
          script-name (get env "SCRIPT_NAME" "")]
      (if (= (get env "REQUEST_METHOD" "") "POST")
        (cond
          (not allow-posting)
          (error-view (:503 statuses) (msgcat :posting-disabled))

          (address-rate-limited? db remote current-timestamp)
          (error-view (:429 statuses) (msgcat :rate-limited))

          (or (joker.string/blank? (query "name"))
              (joker.string/blank? (query "message")))
          (error-view (:422 statuses) (msgcat :required-field-missing))

          (not-empty too-long)
          (error-view (:422 statuses) (msgcat :too-long (joker.string/join ", " too-long)))

          (joker.string/blank? (query "captcha"))
          (error-view (:422 statuses) (msgcat :captcha-missing))

          (not (captcha-solution?
                db
                current-timestamp
                (query "captcha")
                (query "challenge")
                (query "signature")))
          (error-view (:422 statuses) (msgcat :captcha-wrong))

          :else
          (do
            (add-entry db current-timestamp remote query)
            (normal-view db script-name allow-posting page-captcha)))
        (normal-view db script-name allow-posting page-captcha)))
    (catch Error e
      (error-view (:500 statuses) (if debug e (msgcat :unknown-error))))))

(let [db (joker.bolt/open db-file 0600)]
  (dorun
   (for [bucket (vals buckets)]
     (joker.bolt/create-bucket-if-not-exists db bucket)))
  (print
   (cgi
    db
    (joker.os/env)
    (slurp *in*)))
  (joker.bolt/close db))
